use Test;
use ParaSeq;

plan 20;

ok &hyperize, 'was hyperize exported';
ok &racify,   'was racify exported';

my constant $elems  = 200000;
my constant $batch  = 16;
my constant @list   = (^$elems).List;
my constant $mapper = { $_ => 2 * $_ }
my constant %mapped = @list.map: $mapper;

isa-ok @list.&hyperize, ParaSeq, 'did hyperize produce a ParaSeq';
isa-ok @list.&racify,   ParaSeq, 'did racify produce a ParaSeq';

for 1, ParaSeq.default-degree {
    is-deeply @list.&hyperize($batch, $_).Array, [@list],
      "did .Array produce ok with degree $_";
    is-deeply @list.&hyperize($batch, $_).Hash, @list.Hash,
      "did .Hash produce ok with degree $_";
    is-deeply @list.&hyperize($batch, $_).List, @list,
      "did .List produce ok with degree $_";
    is-deeply @list.&hyperize($batch, $_).Map, @list.Map,
      "did .Map produce ok with degree $_";
    is-deeply @list.&hyperize($batch, $_).Seq, @list.Seq,
      "did .Seq produce ok with degree $_";
    is-deeply @list.&hyperize($batch, $_).Slip, @list.Slip,
      "did .Slip produce ok with degree $_";

    is-deeply @list.&hyperize($batch, $_).serial, @list.serial,
      "did .serial produce ok with degree $_";

    my %m is Map = @list.&racify($batch, $_).map($mapper);
    is-deeply %m, %mapped,
      "did .map(mapper) produce ok with degree $_";
}

# vim: expandtab shiftwidth=4
