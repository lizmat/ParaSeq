use Test;
use ParaSeq;

plan 16;

my constant $elems    = 200000;
my constant $expected = $elems * 1.4;
my constant $batch    = 16;

# Simple mapping
my constant @list   = (^$elems).map({ $_ %% 5 ?? ($_,$_+1,$_+2) !! $_}).List;
my constant $map2   = @list.deepmap(* * 2).List;

# Blocks with a "last" in them
my constant $lafter   = 23456;
my constant $mapper2  = { last if $_ == $lafter; $_ * 2 }
my constant $last2    = @list.deepmap($mapper2).List;

# Block with phasers in them
my atomicint $ENTERseen;
my atomicint $LEAVEseen;
my $phasers = {
    ENTER $ENTERseen⚛++;
    LEAVE $LEAVEseen⚛++;
    $_ * 2
}

for 1, ParaSeq.default-degree -> $degree {
    my $seq := @list.&hyperize($batch, $degree).deepmap(* * 2);
    isa-ok $seq, $degree == 1 ?? List !! ParaSeq;
    is-deeply $seq.List, $map2,
      "deepmap(* %% 2) with degree = $degree";

    $seq := @list.&hyperize($batch, $degree).deepmap($mapper2);
    isa-ok $seq, $degree == 1 ?? List !! ParaSeq;
    is-deeply $seq.List, $last2,
      "deepmap(\{ last if \$_ == $lafter; \$_ * 2 }) with degree = $degree";

    $ENTERseen = $LEAVEseen = 0;
    $seq := @list.&hyperize($batch, $degree).deepmap($phasers);
    isa-ok $seq, $degree == 1 ?? List !! ParaSeq;
    is-deeply $seq.List, $map2,
      "deepmap(\{ PHASERS; \$_ * 2 }) with degree = $degree";

    todo("FIRST flag executed for each batch until 2024.06")
      unless $degree == 1;
    is $ENTERseen, $expected,
      "ENTER phaser fired for each iteration with degree $degree";
    is $LEAVEseen, $expected,
      "LEAVE phaser fired for each iteration with degree $degree";
}

# vim: expandtab shiftwidth=4
